/**
 * @file main.cpp
 * @author your name (you@domain.com)
 * @brief 
 * @version 0.1
 * @date 2022-08-05
 * 
 * @copyright Copyright (c) 2022
 * 
 */

/**
 * @brief static 的作用
 * 1. 隐藏。static限制了变量或者函数在本源码文件内。所以如果是.h文件中定义了static变量或者函数，所有包含了该头文
 * 件的源文件都会有此static变量或者函数的一份拷贝。如果是.cpp文件中定义了static变量或者函数，其他，其他cpp文件中
 * 不可见。没有static修饰的全局变量所有cpp都可见，只要加extern 或者声明函数。
 * 2. 初始化。static修饰的变量会被初始化为0
 * 3. 持久化。无论是static全局变量还是static局部变量，都只会被定义一次，且生命周期是到整个程序结束。
 * 4. C++中： 在类中的static成员属于整个类，不属于某个对象，没有this指针，static成员函数不能被virtual修饰
 * 
 * 
 * @brief static变量什么时候初始化
 * 1. 初始化只有一次，但可以多次赋值，在主程序之前，编译器已经为其分配好了内存
 * 2. 静态局部变量和全局变量一样，数据都放在全局区域，所以在主程序之前，编译器已经为其分配好了内存。但在C
 * 和C++中静态局部变量的初始化节点不太一样。在C中，初始化发生在代码执行之前，编译阶段分配好内存之后，就会
 * 进行初始化。所以在C语言中，无法用变量对静态局部变量进行初始化。在程序结束时，变量所处的全局内存会被全部
 * 回收。
 * 3.在C++中，初始化是在执行相关代码时才会进行初始化，主要是由于C++引入对象后，要进行初始化必须执行相应的
 * 构造函数和析构函数，在构造函数和析构函数中经常会需要进行特定操作，并非简单地分配内存。所以C++标准规定全
 * 局静态对象是首次用到时才会进行构造。所以C++中可以使用变量对静态局部变量进行初始化。
 */
#include "a.h"
#include <iostream>
int test();
using namespace std;
int main() {
    cout << "var static a in main.cpp : " << &a << endl;
    test();
    int* c = new int[100];
}
